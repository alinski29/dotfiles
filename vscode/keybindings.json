[{
		"key": "alt+up",
		"command": "-editor.action.moveLinesUpAction"
	},
	{
		"key": "alt+down",
		"command": "-editor.action.moveLinesDownAction"
	},
	{
		"key": "alt+h",
		"command": "workbench.action.navigateLeft"
	},
	{
		"key": "alt+l",
		"command": "workbench.action.navigateRight",
		"when": "vim.mode == 'Normal'"
	},
	{
		"key": "alt+k",
		"command": "workbench.action.navigateUp"
	},
	{
		"key": "alt+j",
		"command": "workbench.action.navigateDown"
	},
	{
		"key": "e",
		"command": "explorer.openAndPassFocus",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
	},
	{
		"key": "enter",
		"command": "-explorer.openAndPassFocus",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
	},
	{
		"key": "shift+e",
		"command": "explorer.openToSide",
		"when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
	},
	{
		"key": "ctrl+enter",
		"command": "-explorer.openToSide",
		"when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
	},
	{
		"key": "d d",
		"command": "deleteFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "shift+delete",
		"command": "-deleteFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "u",
		"command": "filesExplorer.cancelCut",
		"when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
	},
	{
		"key": "escape",
		"command": "-filesExplorer.cancelCut",
		"when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
	},
	{
		"key": "y",
		"command": "filesExplorer.copy",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
	},
	{
		"key": "ctrl+c",
		"command": "-filesExplorer.copy",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
	},
	{
		"key": "d",
		"command": "filesExplorer.cut",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
	},
	{
		"key": "ctrl+x",
		"command": "-filesExplorer.cut",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
	},
	{
		"key": "p",
		"command": "filesExplorer.paste",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "ctrl+v",
		"command": "-filesExplorer.paste",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "d d",
		"command": "moveFileToTrash",
		"when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "delete",
		"command": "-moveFileToTrash",
		"when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "l",
		"command": "nextCompressedFolder",
		"when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
	},
	{
		"key": "right",
		"command": "-nextCompressedFolder",
		"when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
	},
	{
		"key": "h",
		"command": "previousCompressedFolder",
		"when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
	},
	{
		"key": "left",
		"command": "-previousCompressedFolder",
		"when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
	},
	{
		"key": "r",
		"command": "renameFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "f2",
		"command": "-renameFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "ctrl+w",
		"command": "-workbench.action.closeActiveEditor"
	},
	{
		"key": "ctrl+shift+e",
		"command": "workbench.view.explorer",
		"when": "vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+e",
		"command": "-workbench.view.explorer"
	},
	{
		"key": "ctrl+p",
		"command": "-workbench.action.quickOpen"
	},
	{
		"key": "ctrl+shift+f",
		"command": "-workbench.action.findInFiles"
	},
	{
		"key": "shift+l",
		"command": "-notebook.toggleLineNumbers",
		"when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && notebookEditorFocused && !inputFocus && notebookType == 'jupyter-notebook'"
	},
	{
		"key": "space",
		"command": "-refactorPreview.toggleCheckedState",
		"when": "listFocus && refactorPreview.enabled && !inputFocus"
	},
	{
		"key": "space",
		"command": "-notification.toggle",
		"when": "notificationFocus"
	},
	{
		"key": "space",
		"command": "-filesExplorer.openFilePreserveFocus",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
	},
	{
		"key": "ctrl+e",
		"command": "workbench.action.toggleSidebarVisibility",
		"when": "vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+b",
		"command": "-workbench.action.toggleSidebarVisibility"
	},
	{
		"key": "ctrl+g",
		"command": "-workbench.action.gotoLine"
	},
	{
		"key": "ctrl+o",
		"command": "workbench.action.quickOpen",
		"when": "vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+e",
		"command": "-workbench.action.quickOpen"
	},
	{
		"key": "ctrl+o",
		"command": "-workbench.action.files.openFile",
		"when": "true"
	},
	{
		"key": "shift+l",
		"command": "workbench.action.nextEditor",
		"when": "editorTextFocus && !terminalFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+pagedown",
		"command": "-workbench.action.nextEditor"
	},
	{
		"key": "shift+h",
		"command": "workbench.action.previousEditor",
		"when": "editorTextFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+pageup",
		"command": "-workbench.action.previousEditor"
	},
	{
		"key": "ctrl+shift+l",
		"command": "workbench.action.terminal.focusNext",
		"when": "terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+pagedown",
		"command": "-workbench.action.terminal.focusNext",
		"when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
	},
	{
		"key": "ctrl+shift+h",
		"command": "workbench.action.terminal.focusPrevious",
		"when": "terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+pageup",
		"command": "-workbench.action.terminal.focusPrevious",
		"when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
	},
	{
		"key": "ctrl+shift+h",
		"command": "workbench.action.moveEditorLeftInGroup",
		"when": "!terminalFocus"
	},
	{
		"key": "ctrl+shift+pageup",
		"command": "-workbench.action.moveEditorLeftInGroup"
	},
	{
		"key": "ctrl+shift+l",
		"command": "workbench.action.moveEditorRightInGroup",
		"when": "!terminalFocus"
	},
	{
		"key": "ctrl+shift+pagedown",
		"command": "-workbench.action.moveEditorRightInGroup"
	},
	{
		"key": "ctrl+shift+x",
		"command": "-workbench.view.extensions",
		"when": "viewContainer.workbench.view.extensions.enabled"
	},
	{
		"key": "ctrl+x",
		"command": "workbench.action.closeActiveEditor",
		"when": "vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+l",
		"command": "-editor.action.selectHighlights",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+shift+l",
		"command": "-selectAllSearchEditorMatches",
		"when": "inSearchEditor"
	},
	{
		"key": "ctrl+shift+g shift+h",
		"command": "-gitlens.showQuickRepoHistory",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+g h",
		"command": "-gitlens.showQuickFileHistory",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+h",
		"command": "-workbench.action.replaceInFiles"
	},
	{
		"key": "ctrl+x",
		"command": "-extension.vim_ctrl+x",
		"when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl"
	},
	{
		"key": "ctrl+x",
		"command": "-filesExplorer.cut",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "ctrl+; ctrl+x",
		"command": "-testing.cancelRun"
	},
	{
		"key": "ctrl+g",
		"command": "-extension.vim_ctrl+g",
		"when": "editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl"
	},
	{
		"key": "ctrl+shift+.",
		"command": "-breadcrumbs.focusAndSelect",
		"when": "breadcrumbsPossible"
	},
	{
		"key": "ctrl+.",
		"command": "workbench.action.gotoSymbol",
		"when": "!terminalFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+o",
		"command": "-workbench.action.gotoSymbol"
	},
	{
		"key": "ctrl+t",
		"command": "-extension.vim_ctrl+t",
		"when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl"
	},
	{
		"key": "ctrl+t",
		"command": "-workbench.action.showAllSymbols"
	},
	{
		"key": "shift+alt+l",
		"command": "workbench.action.moveEditorToRightGroup",
		"when": "vim.mode == 'Normal'"
	},
	{
		"key": "shift+alt+h",
		"command": "workbench.action.moveEditorToLeftGroup"
	},
	{
		"key": "ctrl+-",
		"command": "workbench.action.splitEditorOrthogonal"
	},
	{
		"key": "ctrl+k ctrl+\\",
		"command": "-workbench.action.splitEditorOrthogonal"
	},
	{
		"key": "ctrl+-",
		"command": "-workbench.action.zoomOut"
	},
	{
		"key": "ctrl+f",
		"command": "actions.find",
		"when": "editorFocus || editorIsOpen"
	},
	{
		"key": "ctrl+f",
		"command": "-actions.find",
		"when": "editorFocus || editorIsOpen"
	},
	{
		"key": "ctrl+h",
		"command": "-editor.action.startFindReplaceAction",
		"when": "editorFocus || editorIsOpen"
	},
	{
		"key": "ctrl+shift+f",
		"command": "-workbench.view.search",
		"when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
	},
	{
		"key": "ctrl+shift+g",
		"command": "-workbench.view.scm",
		"when": "workbench.scm.active"
	},
	{
		"key": "ctrl+shift+g g",
		"command": "-workbench.view.scm",
		"when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+g /",
		"command": "-gitlens.gitCommands",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+g .",
		"command": "-gitlens.diffWithNext",
		"when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g .",
		"command": "-gitlens.diffWithNextInDiffLeft",
		"when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g .",
		"command": "-gitlens.diffWithNextInDiffRight",
		"when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g ,",
		"command": "-gitlens.diffWithPrevious",
		"when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g ,",
		"command": "-gitlens.diffWithPreviousInDiffLeft",
		"when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g ,",
		"command": "-gitlens.diffWithPreviousInDiffRight",
		"when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g shift+[IntlBackslash]",
		"command": "-gitlens.diffWithWorking",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g shift+.",
		"command": "-gitlens.diffWithWorking",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g [IntlBackslash]",
		"command": "-gitlens.diffLineWithPrevious",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g shift+,",
		"command": "-gitlens.diffLineWithPrevious",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g c",
		"command": "-gitlens.showQuickCommitFileDetails",
		"when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+g s",
		"command": "-gitlens.showQuickRepoStatus",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+g b",
		"command": "-gitlens.toggleFileBlame",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
	},
	{
		"key": "ctrl+shift+g shift+b",
		"command": "-gitlens.toggleCodeLens",
		"when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+r",
		"command": "editor.action.startFindReplaceAction",
		"when": "vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+1",
		"command": "-editor.action.replaceOne",
		"when": "editorFocus && findWidgetVisible"
	},
	{
		"key": "alt+enter",
		"command": "editor.action.replaceAll",
		"when": "editorFocus && findWidgetVisible"
	},
	{
		"key": "ctrl+alt+enter",
		"command": "-editor.action.replaceAll",
		"when": "editorFocus && findWidgetVisible"
	},
	{
		"key": "shift+l",
		"command": "workbench.action.nextPanelView",
		"when": "panelFocus && !terminalFocus && vim.mode != 'Insert' && !editorTextFocus"
	},
	{
		"key": "shift+h",
		"command": "workbench.action.previousPanelView",
		"when": "panelFocus && vim.mode != 'Insert' && !terminalFocus"
	},
	{
		"key": "ctrl+0",
		"command": "-workbench.action.focusSideBar"
	},
	{
		"key": "shift+l",
		"command": "workbench.action.nextSideBarView",
		"when": "sideBarFocus && !editorTextFocus && !searchInputBoxFocus"
	},
	{
		"key": "shift+h",
		"command": "workbench.action.previousSideBarView",
		"when": "sideBarFocus && !editorTextFocus && !searchInputBoxFocus"
	},
	{
		"key": "ctrl+shift+t",
		"command": "workbench.action.terminal.new",
		"when": "terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+`",
		"command": "-workbench.action.terminal.new",
		"when": "terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+j",
		"command": "workbench.action.terminal.focusNext",
		"when": "terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+k",
		"command": "workbench.action.terminal.focusPrevious",
		"when": "terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+up",
		"command": "workbench.action.terminal.resizePaneUp",
		"when": "terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+down",
		"command": "workbench.action.terminal.resizePaneDown",
		"when": "terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+c",
		"command": "-workbench.action.terminal.openNativeConsole",
		"when": "!terminalFocus"
	},
	{
		"key": "ctrl+shift+\\",
		"command": "-workbench.action.terminal.focusTabs",
		"when": "terminalFocus && terminalProcessSupported || terminalProcessSupported && terminalTabsFocus"
	},
	{
		"key": "ctrl+shift+x",
		"command": "workbench.action.terminal.kill"
	},
	{
		"key": "ctrl+shift+,",
		"command": "workbench.action.terminal.rename",
		"when": "terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+left",
		"command": "workbench.action.decreaseViewSize",
		"when": "!editorFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+right",
		"command": "workbench.action.increaseViewSize",
		"when": "!editorFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+`",
		"command": "workbench.action.togglePanel"
	},
	{
		"key": "ctrl+j",
		"command": "-workbench.action.togglePanel"
	},
	{
		"key": "ctrl+shift+up",
		"command": "workbench.action.increaseViewHeight",
		"when": "editorFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+down",
		"command": "workbench.action.decreaseViewHeight",
		"when": "editorFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+right",
		"command": "workbench.action.increaseViewWidth",
		"when": "editorFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+left",
		"command": "workbench.action.decreaseViewWidth",
		"when": "editorFocus && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+t",
		"command": "-workbench.action.reopenClosedEditor"
	},
	{
		"key": "ctrl+shift+up",
		"command": "-workbench.action.terminal.scrollUp",
		"when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
	},
	{
		"key": "ctrl+shift+alt+up",
		"command": "-editor.action.copyLinesUpAction",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+shift+up",
		"command": "-editor.action.insertCursorAbove",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+shift+down",
		"command": "-editor.action.insertCursorBelow",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+shift+alt+down",
		"command": "-editor.action.copyLinesDownAction",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+shift+down",
		"command": "-workbench.action.terminal.scrollDown",
		"when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
	},
	{
		"key": "shift+alt+up",
		"command": "-editor.action.insertCursorAbove",
		"when": "editorTextFocus"
	},
	{
		"key": "shift+alt+down",
		"command": "-editor.action.insertCursorBelow",
		"when": "editorTextFocus"
	},
	{
		"key": "shift+alt+i",
		"command": "-editor.action.insertCursorAtEndOfEachLineSelected",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+u",
		"command": "-cursorUndo",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+left",
		"command": "-cursorWordLeft",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+right",
		"command": "-cursorWordEndRight",
		"when": "textInputFocus"
	},
	{
		"key": "shift+right",
		"command": "-cursorRightSelect",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+shift+right",
		"command": "-cursorWordEndRightSelect",
		"when": "textInputFocus"
	},
	{
		"key": "shift+left",
		"command": "-cursorLeftSelect",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+shift+left",
		"command": "-cursorWordLeftSelect",
		"when": "textInputFocus"
	},
	{
		"key": "shift+left",
		"command": "-cursorColumnSelectLeft",
		"when": "editorColumnSelection && textInputFocus"
	},
	{
		"key": "shift+right",
		"command": "-cursorColumnSelectRight",
		"when": "editorColumnSelection && textInputFocus"
	},
	{
		"key": "shift+up",
		"command": "-cursorColumnSelectUp",
		"when": "editorColumnSelection && textInputFocus"
	},
	{
		"key": "shift+pageup",
		"command": "-cursorColumnSelectPageUp",
		"when": "editorColumnSelection && textInputFocus"
	},
	{
		"key": "shift+up",
		"command": "-cursorUpSelect",
		"when": "textInputFocus"
	},
	{
		"key": "shift+down",
		"command": "-cursorColumnSelectDown",
		"when": "editorColumnSelection && textInputFocus"
	},
	{
		"key": "shift+pagedown",
		"command": "-cursorColumnSelectPageDown",
		"when": "editorColumnSelection && textInputFocus"
	},
	{
		"key": "shift+pagedown",
		"command": "-cursorPageDownSelect",
		"when": "textInputFocus"
	},
	{
		"key": "shift+down",
		"command": "-cursorDownSelect",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+a",
		"command": "-editor.action.selectAll"
	},
	{
		"key": "ctrl+shift+/",
		"command": "editor.action.blockComment",
		"when": "editorTextFocus && !editorReadonly && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+shift+a",
		"command": "-editor.action.blockComment",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+k ctrl+c",
		"command": "-editor.action.addCommentLine",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+k ctrl+/",
		"command": "-editor.foldAllBlockComments",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+u",
		"command": "-editor.action.removeCommentLine",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+a",
		"command": "editor.action.selectAll"
	},
	{
		"key": "ctrl+j",
		"command": "selectNextSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+k",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+j",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+shift+f10",
		"command": "-editor.action.peekDefinition",
		"when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
	},
	{
		"key": "ctrl+k shift+enter",
		"command": "-workbench.action.unpinEditor",
		"when": "activeEditorIsPinned"
	},
	{
		"key": "ctrl+k z",
		"command": "-workbench.action.toggleZenMode"
	},
	{
		"key": "ctrl+k f",
		"command": "-workbench.action.closeFolder",
		"when": "emptyWorkspaceSupport && workbenchState != 'empty'"
	},
	{
		"key": "ctrl+k ctrl+k",
		"command": "-editor.action.defineKeybinding",
		"when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
	},
	{
		"key": "ctrl+k ctrl+h",
		"command": "-workbench.action.output.toggleOutput",
		"when": "workbench.panel.output.active"
	},
	{
		"key": "ctrl+k ctrl+shift+\\",
		"command": "-workbench.action.splitEditorInGroup",
		"when": "activeEditorCanSplitInGroup"
	},
	{
		"key": "ctrl+k ctrl+p",
		"command": "-workbench.action.showAllEditors"
	},
	{
		"key": "ctrl+k shift+enter",
		"command": "-workbench.action.pinEditor",
		"when": "!activeEditorIsPinned"
	},
	{
		"key": "ctrl+k ctrl+pageup",
		"command": "-workbench.action.previousEditorInGroup"
	},
	{
		"key": "ctrl+k ctrl+pagedown",
		"command": "-workbench.action.nextEditorInGroup"
	},
	{
		"key": "ctrl+k up",
		"command": "-workbench.action.moveActiveEditorGroupUp"
	},
	{
		"key": "ctrl+k right",
		"command": "-workbench.action.moveActiveEditorGroupRight"
	},
	{
		"key": "ctrl+k left",
		"command": "-workbench.action.moveActiveEditorGroupLeft"
	},
	{
		"key": "ctrl+k down",
		"command": "-workbench.action.moveActiveEditorGroupDown"
	},
	{
		"key": "ctrl+k enter",
		"command": "-workbench.action.keepEditor"
	},
	{
		"key": "ctrl+k ctrl+shift+\\",
		"command": "-workbench.action.joinEditorInGroup",
		"when": "sideBySideEditorActive"
	},
	{
		"key": "ctrl+k ctrl+right",
		"command": "-workbench.action.focusRightGroup"
	},
	{
		"key": "ctrl+k ctrl+down",
		"command": "-workbench.action.focusBelowGroup"
	},
	{
		"key": "ctrl+k ctrl+left",
		"command": "-workbench.action.focusLeftGroup"
	},
	{
		"key": "ctrl+k ctrl+up",
		"command": "-workbench.action.focusAboveGroup"
	},
	{
		"key": "ctrl+k u",
		"command": "-workbench.action.closeUnmodifiedEditors"
	},
	{
		"key": "ctrl+k w",
		"command": "-workbench.action.closeEditorsInGroup"
	},
	{
		"key": "ctrl+k ctrl+w",
		"command": "-workbench.action.closeAllEditors"
	},
	{
		"key": "ctrl+k ctrl+shift+w",
		"command": "-workbench.action.closeAllGroups"
	},
	{
		"key": "ctrl+k ctrl+]",
		"command": "-editor.unfoldRecursively",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+=",
		"command": "-editor.unfoldAllExcept",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+9",
		"command": "-editor.unfoldAllMarkerRegions",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+a",
		"command": "-keybindings.editor.addKeybinding",
		"when": "inKeybindings && keybindingFocus"
	},
	{
		"key": "ctrl+k ctrl+e",
		"command": "-keybindings.editor.defineWhenExpression",
		"when": "inKeybindings && keybindingFocus"
	},
	{
		"key": "ctrl+k ctrl+1",
		"command": "-editor.foldLevel1",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+2",
		"command": "-editor.foldLevel2",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+3",
		"command": "-editor.foldLevel3",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+4",
		"command": "-editor.foldLevel4",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+5",
		"command": "-editor.foldLevel5",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+6",
		"command": "-editor.foldLevel6",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+7",
		"command": "-editor.foldLevel7",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+[",
		"command": "-editor.foldRecursively",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+f",
		"command": "-editor.action.formatSelection",
		"when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+k ctrl+r",
		"command": "-git.revertSelectedRanges",
		"when": "isInDiffEditor"
	},
	{
		"key": "ctrl+k ctrl+alt+s",
		"command": "-git.stageSelectedRanges",
		"when": "isInDiffEditor"
	},
	{
		"key": "ctrl+k ctrl+n",
		"command": "-git.unstageSelectedRanges",
		"when": "isInDiffEditor"
	},
	{
		"key": "ctrl+k ctrl+q",
		"command": "-workbench.action.navigateToLastEditLocation"
	},
	{
		"key": "ctrl+k ctrl+r",
		"command": "-workbench.action.keybindingsReference"
	},
	{
		"key": "ctrl+k v",
		"command": "-markdown.showPreviewToSide",
		"when": "!notebookEditorFocused && editorLangId == 'markdown'"
	},
	{
		"key": "ctrl+k ctrl+d",
		"command": "-editor.action.moveSelectionToNextFindMatch",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+k ctrl+c",
		"command": "-notebook.cell.collapseCellInput",
		"when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
	},
	{
		"key": "ctrl+k t",
		"command": "-notebook.cell.collapseCellOutput",
		"when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
	},
	{
		"key": "ctrl+k ctrl+c",
		"command": "-notebook.cell.expandCellInput",
		"when": "notebookCellInputIsCollapsed && notebookCellListFocused"
	},
	{
		"key": "ctrl+k t",
		"command": "-notebook.cell.expandCellOutput",
		"when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
	},
	{
		"key": "ctrl+k ctrl+shift+\\",
		"command": "-notebook.cell.split",
		"when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
	},
	{
		"key": "ctrl+k f12",
		"command": "-editor.action.revealDefinitionAside",
		"when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
	},
	{
		"key": "ctrl+k ctrl+t",
		"command": "-workbench.action.selectTheme"
	},
	{
		"key": "ctrl+k ctrl+s",
		"command": "-workbench.action.openGlobalKeybindings"
	},
	{
		"key": "ctrl+alt+k",
		"command": "-rest-client.cancel-request",
		"when": "editorTextFocus && editorLangId == 'http'"
	},
	{
		"key": "ctrl+alt+k",
		"command": "-rest-client.cancel-request",
		"when": "editorTextFocus && editorLangId == 'plaintext'"
	},
	{
		"key": "ctrl+k ctrl+k",
		"command": "-editor.action.selectFromAnchorToCursor",
		"when": "editorTextFocus && selectionAnchorSet"
	},
	{
		"key": "ctrl+k ctrl+0",
		"command": "-editor.foldAll",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+8",
		"command": "-editor.foldAllMarkerRegions",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+-",
		"command": "-editor.foldAllExcept",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+o",
		"command": "-workbench.action.files.openFolder",
		"when": "openFolderWorkspaceSupport"
	},
	{
		"key": "ctrl+k c",
		"command": "-workbench.files.action.compareWithClipboard"
	},
	{
		"key": "ctrl+k d",
		"command": "-workbench.files.action.compareWithSaved"
	},
	{
		"key": "ctrl+k o",
		"command": "-workbench.action.files.showOpenedFileInNewWindow",
		"when": "emptyWorkspaceSupport"
	},
	{
		"key": "ctrl+k e",
		"command": "-workbench.files.action.focusOpenEditorsView",
		"when": "workbench.explorer.openEditorsView.active"
	},
	{
		"key": "ctrl+k s",
		"command": "-workbench.action.files.saveWithoutFormatting"
	},
	{
		"key": "ctrl+shift+k",
		"command": "-editor.action.deleteLines",
		"when": "textInputFocus && !editorReadonly"
	},
	{
		"key": "ctrl+k ctrl+i",
		"command": "-editor.debug.action.showDebugHover",
		"when": "editorTextFocus && inDebugMode"
	},
	{
		"key": "ctrl+k m",
		"command": "-workbench.action.editor.changeLanguageMode",
		"when": "!notebookEditorFocused"
	},
	{
		"key": "ctrl+k ctrl+b",
		"command": "-editor.action.setSelectionAnchor",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+k ctrl+i",
		"command": "-editor.action.showHover",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+k ctrl+l",
		"command": "-editor.toggleFold",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k ctrl+x",
		"command": "-editor.action.trimTrailingWhitespace",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+k ctrl+j",
		"command": "-editor.unfoldAll",
		"when": "editorTextFocus && foldingEnabled"
	},
	{
		"key": "ctrl+k f2",
		"command": "-togglePeekWidgetFocus",
		"when": "inReferenceSearchEditor || referenceSearchVisible"
	},
	{
		"key": "ctrl+k down",
		"command": "-views.moveViewDown",
		"when": "focusedView != ''"
	},
	{
		"key": "ctrl+k left",
		"command": "-views.moveViewLeft",
		"when": "focusedView != ''"
	},
	{
		"key": "ctrl+k right",
		"command": "-views.moveViewRight",
		"when": "focusedView != ''"
	},
	{
		"key": "ctrl+k up",
		"command": "-views.moveViewUp",
		"when": "focusedView != ''"
	},
	{
		"key": "ctrl+k p",
		"command": "-workbench.action.files.copyPathOfActiveFile"
	},
	{
		"key": "ctrl+k ctrl+o",
		"command": "-workbench.action.files.openLocalFolder",
		"when": "remoteFileDialogVisible"
	},
	{
		"key": "ctrl+k r",
		"command": "-workbench.action.files.revealActiveFileInWindows"
	},
	{
		"key": "f12",
		"command": "-editor.action.revealDefinition",
		"when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
	},
	{
		"key": "ctrl+shift+space",
		"command": "-editor.action.triggerParameterHints",
		"when": "editorHasSignatureHelpProvider && editorTextFocus"
	},
	{
		"key": "shift+k",
		"command": "editor.action.showHover",
		"when": "editorTextFocus && vim.mode == 'Normal'"
	},
	{
		"key": "ctrl+k",
		"command": "editor.action.triggerParameterHints",
		"when": "editorHasSignatureHelpProvider && editorTextFocus && vim.mode == 'Normal'"
	},
	{
		"key": "g r",
		"command": "editor.action.referenceSearch.trigger",
		"when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode == 'Normal'"
	},
	{
		"key": "shift+alt+h",
		"command": "-editor.showCallHierarchy",
		"when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
	},
	{
		"key": "shift+alt+h",
		"command": "-references-view.showCallHierarchy",
		"when": "editorHasCallHierarchyProvider"
	}, {
		"key": "shift+alt+f12",
		"command": "-references-view.findReferences",
		"when": "editorHasReferenceProvider"
	}, {
		"key": "ctrl+n",
		"command": "workbench.action.navigateForward",
		"when": "vim.mode != 'Insert'"
	}, {
		"key": "ctrl+shift+-",
		"command": "-workbench.action.navigateForward"
	}, {
		"key": "ctrl+b",
		"command": "workbench.action.navigateBack",
		"when": "vim.mode != 'Insert'"
	}, {
		"key": "ctrl+alt+-",
		"command": "-workbench.action.navigateBack"
	}, {
		"key": "ctrl+shift+[",
		"command": "-editor.fold",
		"when": "editorTextFocus && foldingEnabled"
	}, {
		"key": "ctrl+shift+]",
		"command": "-editor.unfold",
		"when": "editorTextFocus && foldingEnabled"
	}, {
		"key": "ctrl+/",
		"command": "editor.action.commentLine",
		"when": "editorTextFocus && !editorReadonly && vim.mode != 'Insert'"
	}, {
		"key": "ctrl+/",
		"command": "-editor.action.commentLine",
		"when": "editorTextFocus && !editorReadonly"
	}, {
		"key": "ctrl+shift+.",
		"command": "workbench.action.showAllSymbols",
		"when": "vim.mode == 'Normal' && editorFocus"
	}, {
		"key": "ctrl+shift+r",
		"command": "-workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
		"when": "inQuickOpen && inRecentFilesPicker"
	}, {
		"key": "ctrl+shift+r",
		"command": "-rerunSearchEditorSearch",
		"when": "inSearchEditor"
	}, {
		"key": "ctrl+shift+r",
		"command": "-editor.action.refactor",
		"when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
	}, {
		"key": "ctrl+shift+r",
		"command": "workbench.action.replaceInFiles",
		"when": "editorFocus && vim.mode != 'Insert'"
	}, {
		"key": "ctrl+shift+f",
		"command": "workbench.action.findInFiles",
		"when": "editorFocus && vim.mode != 'Insert'"
	}, {
		"key": "ctrl+shift+z",
		"command": "-redo"
	}, {
		"key": "ctrl+shift+z",
		"command": "workbench.action.toggleZenMode"
	}, {
		"key": "ctrl+shift+k",
		"command": "workbench.action.openGlobalKeybindings"
	}, {
		"key": "ctrl+numpad_add",
		"command": "-workbench.action.zoomIn"
	}, {
		"key": "ctrl+shift+=",
		"command": "-workbench.action.zoomIn"
	}, {
		"key": "ctrl+=",
		"command": "-workbench.action.zoomIn"
	}, {
		"key": "ctrl+shift+-",
		"command": "editor.action.fontZoomOut",
		"when": "editorFocus && vim.mode == 'Normal'"
	}, {
		"key": "ctrl+shift+=",
		"command": "editor.action.fontZoomIn",
		"when": "editorFocus && vim.mode == 'Normal'"
	}, {
		"key": "ctrl+numpad_subtract",
		"command": "-workbench.action.zoomOut"
	}, {
		"key": "ctrl+shift+m",
		"command": "-workbench.actions.view.problems",
		"when": "workbench.panel.markers.view.active"
	}, {
		"key": "ctrl+shift+m",
		"command": "workbench.action.toggleMenuBar"
	}, {
		"key": "ctrl+shift+2",
		"command": "-extension.vim_ctrl+shift+2",
		"when": "editorTextFocus && vim.active && vim.use<C-shift+2>"
	}, {
		"key": "ctrl+\\",
		"command": "workbench.action.terminal.toggleTerminal",
		"when": "terminal.active && vim.mode != 'Insert'"
	}, {
		"key": "ctrl+`",
		"command": "-workbench.action.terminal.toggleTerminal",
		"when": "terminal.active"
	}, {
		"key": "g i",
		"command": "editor.action.peekImplementation",
		"when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode == 'Normal'"
	}, {
		"key": "ctrl+shift+f12",
		"command": "-editor.action.peekImplementation",
		"when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
	}, {
		"key": "ctrl+f12",
		"command": "-editor.action.goToImplementation",
		"when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
	}, {
		"key": "shift+f12",
		"command": "-editor.action.goToReferences",
		"when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
	}, {
		"key": "ctrl+shift+i",
		"command": "-editor.action.formatDocument.none",
		"when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
	}, {
		"key": "alt+l",
		"command": "-toggleSearchEditorContextLines",
		"when": "inSearchEditor"
	}, {
		"key": "alt+l",
		"command": "-toggleFindInSelection",
		"when": "editorFocus"
	}, {
		"key": "g c c",
		"command": "editor.action.commentLine",
		"when": "editorTextFocus && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode != 'Insert'"
	}, {
		"key": "g b c",
		"command": "editor.action.blockComment",
		"when": "editorTextFocus && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode != 'Insert'"
	}, {
		"key": "g r",
		"command": "editor.action.referenceSearch.trigger",
		"when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode == 'Normal'"
	}, {
		"key": "g d",
		"command": "editor.action.revealDefinition",
		"when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode == 'Normal'"
	}, {
		"key": "g i",
		"command": "editor.action.goToImplementation",
		"when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode == 'Normal'"
	}, {
		"key": "space h",
		"command": "breadcrumbs.focusAndSelect",
		"when": "editorTextFocus && editorHasCallHierarchyProvider && !inReferenceSearchEditor && vim.mode == 'Normal'"
	}, {
		"key": "space [",
		"command": "editor.fold",
		"when": "editorTextFocus && foldingEnabled && vim.mode == 'Normal'"
	}, {
		"key": "space ]",
		"command": "editor.unfold",
		"when": "editorTextFocus && foldingEnabled && vim.mode == 'Normal'"
	}, {
		"key": "alt+l",
		"command": "vim.remap",
		"when": "inputFocus && vim.mode == 'Insert'",
		"args": {
			"after": ["<Esc>", "$", "a"]
		}
	}, {
		"key": "alt+h",
		"command": "vim.remap",
		"when": "inputFocus && vim.mode == 'Insert'",
		"args": {
			"after": ["<Esc>", "^", "i"]
		}
	}, {
		"key": "alt+o",
		"command": "vim.remap",
		"when": "inputFocus && vim.mode == 'Insert'",
		"args": {
			"after": ["<Esc>", "o"]
		}
	}, {
		"key": "alt+k",
		"command": "vim.remap",
		"when": "inputFocus && vim.mode == 'Insert'",
		"args": {
			"after": ["<Esc>", "k", "a"]
		}
	}, {
		"key": "alt+j",
		"command": "vim.remap",
		"when": "inputFocus && vim.mode == 'Insert'",
		"args": {
			"after": ["<Esc>", "j", "a"]
		}
	},
	{
		"key": "space .",
		"command": "workbench.action.gotoSymbol",
		"when": "!terminalFocus && !inputFocus && !inSearchEditor && !inReferenceSearchEditor && vim.mode != 'Insert'"
	}, 
	{
		"key": "space ,",
		"command": "editor.action.rename",
		"when": "editorHasRenameProvider && editorTextFocus && !editorReadonly && vim.mode == 'Normal'"
	},
	{
		"key": "space f",
		"command": "editor.action.formatDocument",
		"when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor && vim.mode == 'Normal'"
	},
	{
		"key": "space o",
		"command": "python.sortImports",
		"when": "editorTextFocus && !editorReadonly && !inCompositeEditor && vim.mode == 'Normal'"
	}
]